# bt_navigator:
#   ros__parameters:
#     use_sim_time: True
#     global_frame: map
#     robot_base_frame: agent_2
#     transform_tolerance: 0.1
#     goal_blackboard_id: goal
#     goals_blackboard_id: goals
#     path_blackboard_id: path
#     # odom_topic: /odom
#     bt_loop_duration: 10
#     default_server_timeout: 20
#     plugin_lib_names:
#       - nav2_compute_path_to_pose_action_bt_node
#       - nav2_follow_path_action_bt_node
#       - nav2_back_up_action_bt_node
#       - nav2_spin_action_bt_node
#       - nav2_wait_action_bt_node
#       - nav2_clear_costmap_service_bt_node
#       - nav2_is_stuck_condition_bt_node
#       - nav2_goal_reached_condition_bt_node
#       - nav2_initial_pose_received_condition_bt_node
#       - nav2_goal_updated_condition_bt_node
#       - nav2_reinitialize_global_localization_service_bt_node
#       - nav2_rate_controller_bt_node
#       - nav2_distance_controller_bt_node
#       - nav2_speed_controller_bt_node
#       - nav2_recovery_node_bt_node
#       - nav2_pipeline_sequence_bt_node
#       - nav2_round_robin_node_bt_node
#       - nav2_transform_available_condition_bt_node
#       - nav2_time_expired_condition_bt_node
#       - nav2_distance_traveled_condition_bt_node
#       - nav2_single_trigger_bt_node
#     error_code_names:
#       - compute_path_error_code
#       - follow_path_error_code

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    planner_plugins: ['GridBased']
    GridBased:
      plugin: 'nav2_navfn_planner/NavfnPlanner'

global_costmap:
  global_costmap:
    ros__parameters:
      # Whether to send full costmap every update, rather than updates. (default: false)
      always_send_full_costmap: True

      # Amount to pad footprint (m). (default: 0.01)
      footprint_padding: 0.01

      # Ordered set of footprint points passed in as a string, must be closed set. For example, the
      # following defines a square base with side lengths of 0.2 meters footprint: “[ [0.1, 0.1],
      # [0.1, -0.1], [-0.1, -0.1], [-0.1, 0.1] ]”. (default: [])
      # Disabled due to circular robot. See `robot_radius` parameter
      # footprint:

      # Reference frame. (default: map)
      global_frame: map

      # Minimum cost of an occupancy grid map to be considered a lethal obstacle. (default: 100)
      lethal_cost_threshold: 100

      # Topic of map from map_server or SLAM. (default: map)
      map_topic: map

      # X origin of the costmap relative to width (m). (default: 0.0)
      origin_x: -10.0

      # Y origin of the costmap relative to height (m). (default: 0.0)
      origin_y: -10.0

      # Frequency to publish costmap to topic. (default 1.0)
      publish_frequency: 1.0

      # Height of costmap (m). (default: 5)
      width: 20

      # Width of costmap (m). (default: 5)
      height: 20

      # Resolution of 1 pixel of the costmap, in meters. (default: 0.1)
      resolution: 0.1

      # Robot base frame. (default: base_link)
      robot_base_frame: agent_2

      # Robot radius to use, if footprint coordinates not provided. (default: 0.1)
      robot_radius: 0.2

      # Whether costmap should roll with robot base frame. (default: False)
      rolling_window: False

      # If false, treats unknown space as free space, else as unknown space. (default: False)
      track_unknown_space: True

      # TF transform tolerance. (default: 0.3)
      transform_tolerance: 0.3

      # If occupancy grid map should be interpreted as only 3 values (free, occupied, unknown) or
      # with its stored values. (default: True)
      trinary_costmap: True

      # Cost of unknown space if tracking it. (default: 255)
      unknown_cost_value: 255

      # Costmap update frequency. (default 5.0)
      update_frequency: 1.0

      # Whether when combining costmaps to use the maximum cost or override. (default: False)
      use_maximum: False

      # List of mapped plugin names for parameter namespaces and names. Note: Each plugin namespace
      # defined in this list needs to have a plugin parameter defining the type of plugin to be
      # loaded in the namespace.
      plugins: ["static_layer", "inflation_layer"]
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        # https://navigation.ros.org/configuration/packages/costmap-plugins/static.html

        # Whether the static_layer plugin is enabled. (default: True)
        enabled: True

        # Subscribe to static map updates after receiving first. (default: False)
        subscribe_to_updates: False

        # QoS settings for map topic. (default: True)
        map_subscribe_transient_local: True

        # TF tolerance. (default: 0.0)
        transform_tolerance: 0.0

        # Map topic to subscribe to. If left empty the map topic will default to the global
        # map_topic parameter in costmap_2d_ros. (default: "")
        map_topic: ""

      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        # https://navigation.ros.org/configuration/packages/costmap-plugins/inflation.html

        # Whether the inflation_layer plugin is enabled. (default: True)
        enabled: True

        # Radius to inflate costmap around lethal obstacles. (default: 0.55)
        inflation_radius: 0.3

        # Exponential decay factor across inflation radius. (default: 10.0)
        cost_scaling_factor: 5.0

        # Whether to inflate unknown cells as if lethal. (default: False)
        inflate_unknown: False

        # Whether to inflate unknown cells. (default: False)
        inflate_around_unknown: False


controller_server:
  ros__parameters:
    #odom_topic: /pedsim_simulator/agent_2_pose
    use_sim_time: True
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["goal_checker"]
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    # Goal checker parameters
    goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.25
      stateful: True
    # DWB parameters
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      min_vel_x: 0.0
      min_vel_y: 0.0
      max_vel_x: 0.26
      max_vel_y: 0.0
      max_vel_theta: 1.0
      min_speed_xy: 0.0
      max_speed_xy: 0.26
      min_speed_theta: 0.0
      # Add high threshold velocity for turtlebot 3 issue.
      # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
      acc_lim_x: 2.5
      acc_lim_y: 0.0
      acc_lim_theta: 3.2
      decel_lim_x: -2.5
      decel_lim_y: 0.0
      decel_lim_theta: -3.2
      vx_samples: 20
      vy_samples: 5
      vtheta_samples: 20
      sim_time: 1.7
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.2
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: True
      stateful: True
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 0.0
      GoalAlign.scale: 0.0
      PathDist.scale: 32.0
      GoalDist.scale: 24.0
      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0

local_costmap:
  local_costmap:
    ros__parameters:
      # Whether to send full costmap every update, rather than updates. (default: false)
      always_send_full_costmap: True

      # Costmap update frequency. (default 5.0)
      update_frequency: 10.0

      # Frequency to publish costmap to topic. (default 1.0)
      publish_frequency: 10.0

      # Reference frame. (default: odom)
      global_frame: map

      # Robot base frame. (default: base_link)
      robot_base_frame: agent_2

      # Whether costmap should roll with robot base frame. (default: False)
      rolling_window: True

      # Height of costmap (m). (default: 5)
      width: 4

      # Width of costmap (m). (default: 5)
      height: 4

      # Resolution of 1 pixel of the costmap, in meters. (default: 0.1)
      resolution: 0.05

      # Robot radius to use, if footprint coordinates not provided. (default: 0.1)
      robot_radius: 0.2

      # List of mapped plugin names for parameter namespaces and names. Note: Each plugin namespace
      # defined in this list needs to have a plugin parameter defining the type of plugin to be
      # loaded in the namespace.
      plugins: ["static_layer", "inflation_layer"]

      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 2.5
        inflation_radius: 0.3

      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        # https://navigation.ros.org/configuration/packages/costmap-plugins/static.html

        # QoS settings for map topic. (default: True)
        map_subscribe_transient_local: True

map_server:
  ros__parameters:
    use_sim_time: True
    yaml_filename: "turtlebot3_world.yaml"
    save_map_timeout: 5.0